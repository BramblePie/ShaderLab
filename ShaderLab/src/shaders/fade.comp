#version 430

layout (location = 0, rgba16f) uniform image2D map;
layout (location = 1, rgba16f) uniform image2D post;
layout (location = 2) uniform float delta;
layout (location = 3) uniform float fadeStr;
layout (location = 4) uniform float diffuseStr;

layout (local_size_x = 4, local_size_y = 4) in;

void main() 
{
	const uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
	const ivec2 imgSize = imageSize(map);
	
	const int x = int(gl_GlobalInvocationID.x);
	const int y = int(gl_GlobalInvocationID.y);

	if(x < 0 || x >= imgSize.x || y < 0 || y >= imgSize.y)
	{
		return;
	}

	vec4 sum = vec4(0.0);
	for (int i = x - 1; i <= x + 1; i++)
	{
		for (int j = y - 1; j <= y + 1; j++)
		{
			ivec2 ij = ivec2(i, j);
			
			if (ij.x < 0.0)
				ij.x += imgSize.x;
			else if (ij.x >= imgSize.x)
				ij.x -= imgSize.x;
			if (ij.y < 0.0)
				ij.y += imgSize.y;
			else if (ij.y >= imgSize.y)
				ij.y -= imgSize.y;

			//if (i >= 0 && i < imgSize.x && j >= 0 && j < imgSize.y)
			sum += imageLoad(map, ij);
		}
	}
	vec4 src = imageLoad(map, ivec2(x, y));
	sum /= 9.0;
	//vec4 diffuse = mix(src, sum, delta * diffuseStr);
	vec4 diffuse = src + delta * diffuseStr * (sum - src);
	vec4 clr = max(vec4(.0), diffuse - delta * fadeStr * diffuse);

	imageStore(post, ivec2(gl_GlobalInvocationID.xy), clr);
}
