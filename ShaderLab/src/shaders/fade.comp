#version 430

layout (location = 0, rgba32f) uniform image2D map;
layout (location = 1, rgba32f) uniform writeonly image2D post;
layout (location = 2) uniform float delta;

layout (local_size_x = 16, local_size_y = 16) in;

//const vec2 offsets[9] = vec2[](
//	vec2(-1.0, 1.0), vec2( 0.0, 1.0), vec2(1.0, 1.0),
//	vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0),  
//	vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0) 
//    );

void main() 
{
	const uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
	const ivec2 imgSize = imageSize(map);
	
	const int x = int(gl_GlobalInvocationID.x);
	const int y = int(gl_GlobalInvocationID.y);

	if(x < 0 || x >= imgSize.x || y < 0 || y >= imgSize.y)
	{
		return;
	}

	vec3 sum = vec3(0.0);

	for (int i = x - 1; i <= x + 1; i++)
	{
		for (int j = y - 1; j <= y + 1; j++)
		{
			sum += imageLoad(map, ivec2(i, j)).rgb;
		}
	}
	vec3 diffuse = mix(imageLoad(map, ivec2(x, y)).rgb, sum, delta).rgb;
	vec3 clr = imageLoad(map, ivec2(x, y)).rgb - delta * 0.5;

	imageStore(post, ivec2(gl_GlobalInvocationID.xy), vec4(imageLoad(map, ivec2(x, y)).rgb, 1.0));
}
