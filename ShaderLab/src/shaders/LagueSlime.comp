#version 430

#define PI 3.1415926535897932384626433832795

layout (location = 0) uniform writeonly image2D map;
layout (location = 1) uniform uint seed;
layout (location = 2) uniform float delta;

struct Agent
{
	vec2 position;
	float angle;
	int id;
};

layout(std430, binding = 0) buffer ssbo
{
	Agent agents[];
};


uint hash(uint state);

layout (local_size_x = 32, local_size_y = 1) in;

void main() 
{
	const uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
	const ivec2 imgSize = imageSize(map);

	Agent agent = agents[id];
	vec2 direction = vec2(cos(agent.angle), sin(agent.angle));
	vec2 pos = agent.position + direction * delta * 100.0;

	if(pos.x < 0.0 || pos.x >= imgSize.x || pos.y < 0.0 || pos.y >= imgSize.y)
	{
		pos.x = min(imgSize.x - 1, max(0.0, pos.x));
		pos.y = min(imgSize.y - 1, max(0.0, pos.y));

		const float rngAngle = PI * 2.0 * float(hash(uint(agent.position.y * imgSize.x + agent.position.x) + hash(id))) / 4294867295.0;
		agents[id].angle = rngAngle;
	}

	agents[id].position = pos;
	imageStore(map, ivec2(pos), vec4(1.0));
}

uint hash(uint state)
{
	state *= seed;
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}