#version 430

#define PI 3.1415926535897932384626433832795

layout (location = 0, rgba32f) uniform image2D map;
layout (location = 1) uniform uint seed;
layout (location = 2) uniform float delta;

layout (location = 3) uniform float speed;
layout (location = 4) uniform float turnSpeed;
layout (location = 5) uniform float sensorOffset;
layout (location = 6) uniform float sensorDistance;
layout (location = 7) uniform int sensorSize;

struct Agent
{
	vec2 position;
	vec2 direction;
};

layout(std430, binding = 0) buffer ssbo
{
	Agent agents[];
};

uint hash(uint state);
float random(uint state);
float sense(const Agent agent, const vec2 sensor);

layout (local_size_x = 4, local_size_y = 4) in;

const ivec2 imgSize = imageSize(map);
const uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;

void main() 
{

	const Agent agent = agents[id];
	const uint uniqueState = uint(agent.position.y * imgSize.x + agent.position.x) + hash(id);
	const vec3 Z = vec3(.0, .0, 1.0);
	// Turn weights
	const float wForward = sense(agent, vec2(0.0));
	const vec2 left = cross(Z, vec3(agent.direction, .0)).xy;
	const float wLeft = sense(agent, left * sensorOffset);
	const float wRight = sense(agent, left * -sensorOffset);

	float turnStr = (random(uniqueState) * 2.0 - 1.0) * turnSpeed;

	if (wForward > wLeft && wForward > wRight)
	{	// Stay oncourse
		turnStr = 0.0;
	}
	else if (wRight - wLeft > .1)
	{	// Go right
		turnStr = -abs(turnStr);
	}
	else if (wLeft - wRight > .1)
	{	// Go left
		turnStr = abs(turnStr);
	}
	// Go to the left by turnStr random(-1, 1) amount
	vec2 direction = normalize(agent.direction + left * turnStr * delta);
	// Get new position
	vec2 pos = agent.position + direction * delta * speed;

	// No random angle, just reflect
	if (pos.x < 0.0 || pos.x >= imgSize.x)
		direction.x *= -1.0;
	if (pos.y < 0.0 || pos.y >= imgSize.y)
		direction.y *= -1.0;

	agents[id].position = pos;
	agents[id].direction = direction;
	imageStore(map, ivec2(pos), vec4(1.0));
}

float sense(const Agent agent, const vec2 sensor)
{
	const ivec2 sensorPos = ivec2(agent.position + agent.direction * sensorDistance + sensor);

	float weight = 0.0;
	for (int i = -sensorSize; i <= sensorSize; i++)
	{
		for (int j = -sensorSize; j <= sensorSize; j++)
		{
			const ivec2 ij = sensorPos + ivec2(i, j);
			if (ij.x >= 0 || ij.x < imgSize.x || ij.y >= 0 || ij.y < imgSize.y)
			{
				const vec3 clr = imageLoad(map, ij).rgb;
				weight += (clr.r + clr.g + clr.b) / 3.0;
			}
		}
	}
	return weight;
}

float random(uint state)
{
	return float(hash(state)) / 4294867295.0;
}

uint hash(uint state)
{
	state *= seed;
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}